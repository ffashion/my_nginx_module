#include <ngx_config.h>
#include <ngx_http.h>
#include <ngx_core.h>
#include <stdio.h>
#include <unistd.h>
//12345677


//static ngx_http_variable_t  ngx_http_realip_vars[] = {
//     {

//     },
//       ngx_http_null_variable
// };
static void 
ngx_http_mytest_variables_set_handler(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data);

static ngx_int_t 
ngx_http_mytest_variables_get_handler(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data);

typedef struct {
    ngx_str_t my_str;
    ngx_int_t my_num;
    ngx_flag_t my_flag;
    size_t my_size;
    ngx_array_t *my_str_array;
    ngx_array_t *my_keyval;
    off_t  my_off;
    ngx_msec_t my_msec;
    time_t my_sec;
    ngx_bufs_t my_bufs;
    ngx_uint_t my_enum_seq;
    ngx_uint_t my_bitmask;
    ngx_uint_t my_access;
    ngx_path_t *my_path;
    ngx_int_t var_index;
} ngx_http_mytest_conf_t;

typedef struct {
    ngx_str_t my_config_str;
    ngx_int_t my_config_num;
} ngx_http_mytest_config_conf_t;

static ngx_http_variable_t ngx_http_mytest_vaiable_var = {
    ngx_string("mytest_var"), //name /* must be first to build the hash */
    ngx_http_mytest_variables_set_handler, //set handler
    ngx_http_mytest_variables_get_handler, // get_handler
    0, //data
   NGX_HTTP_VAR_NOCACHEABLE,//flags
    0//index
};

//第二个是需要设置或者获取的变量值
//第三个是初始化时的回调指针
//flags 
// NGX_HTTP_VAR_CHANGEABLE表示这个变量是可变的.Nginx有很多内置变量是不可变的，比如arg_xxx这类变量，如果你使用set指令来修改，那么Nginx就会报错.
// NGX_HTTP_VAR_NOCACHEABLE表示这个变量每次都要去取值，而不是直接返回上次cache的值(配合对应的接口).
// NGX_HTTP_VAR_INDEXED表示这个变量是用索引读取的.
// NGX_HTTP_VAR_NOHASH表示这个变量不需要被hash.
static void ngx_http_mytest_variables_set_handler(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data){



}

//当我们在get_handle中设置变量值的时候，只需要将对应的值放入到data中就可以了
//v 如果你需要自定义数据的话 那么v->data你需要自己 palloc一个空间 否则v本身是已经创建好了的
//data可以给变量设置除了r以外的值 也有可能是初始化的时候使用的
static ngx_int_t ngx_http_mytest_variables_get_handler(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data){

        v->data = ngx_palloc(r->pool,100);
        ngx_sprintf(v->data,"hello world");
        v->len = sizeof("hello world");
        v->valid = 1;
        v->not_found = 0;
    // //获取uri的代码
    // if (r->uri.len) {
    //     v->len = r->uri.len;
    //     v->valid = 1;
    //     v->no_cacheable = 0;
    //     v->not_found = 0;
    //     v->data = r->uri.data;

    // } else {
    //     v->not_found = 1;
    // }

    return NGX_OK;
}


void body_handler(ngx_http_request_t *r){


    //由于返回类型是void 所以需要主动结束请求
    ngx_http_finalize_request(r,0);
}

ngx_int_t ngx_http_mytest_init_modules(ngx_cycle_t *cycle){
    // printf("hello world!!!\n");
    // if(write(STDOUT_FILENO,cycle->conf_file.data,cycle->conf_file.len) != 0){
    // }
    // printf("\n");
    // if(write(STDOUT_FILENO,cycle->conf_param.data,cycle->conf_param.len) != 0){
    // }
    // printf("\n");
    // if(write(STDOUT_FILENO,cycle->conf_prefix.data,cycle->conf_prefix.len) != 0){
    // }
    // printf("\n");
    // if(write(STDOUT_FILENO,cycle->prefix.data,cycle->prefix.len) != 0){   
    // }
    // if(write(STDOUT_FILENO,cycle->lock_file.data,cycle->lock_file.len) != 0){   
    // }
    return 0;
}

static void *ngx_http_mytest_create_loc_conf(ngx_conf_t *cf){
    ngx_http_mytest_conf_t *mycf;
    mycf = (ngx_http_mytest_conf_t *)ngx_palloc(cf->pool,sizeof(ngx_http_mytest_conf_t));
    mycf->my_flag = NGX_CONF_UNSET;
    mycf->my_num = NGX_CONF_UNSET;
    mycf->my_str_array = NGX_CONF_UNSET_PTR;
    mycf->my_keyval = NULL;
    mycf->my_off = NGX_CONF_UNSET;
    mycf->my_msec = NGX_CONF_UNSET_MSEC;
    mycf->my_sec = NGX_CONF_UNSET;
    mycf->my_size = NGX_CONF_UNSET_SIZE;
    return mycf;
}

static ngx_int_t
ngx_http_mytest_add_variables(ngx_conf_t *cf){
    ngx_http_mytest_conf_t *mycf;
    mycf = (ngx_http_mytest_conf_t *)ngx_palloc(cf->pool,sizeof(ngx_http_mytest_conf_t));


    ngx_http_variable_t *var = NULL, *v = &ngx_http_mytest_vaiable_var;

    var = ngx_http_add_variable(cf,&v->name,v->flags);
    if (var == NULL) {
        return NGX_ERROR;
    }

    var->get_handler = v->get_handler;
    var->data = v->data;

    mycf->var_index =  ngx_http_get_variable_index(cf,"mytest_var");


    return NGX_OK;

}

static ngx_http_module_t ngx_http_mytest_module_ctx = {
    ngx_http_mytest_add_variables, /* preconfiguration */
    NULL, /* postconfiguration */

    NULL, /* create main configuration */
    NULL, /* init main configuration */

    NULL, /* create server configuration */
    NULL, /* merge server configuration */

    ngx_http_mytest_create_loc_conf, /* create location configuration */
    NULL /* merge location configuration */
};





//worker进程执行
static ngx_int_t ngx_http_mytest_handler(ngx_http_request_t *r){
    int fd = open("log1", O_RDWR | O_CREAT |O_APPEND);
    if(write(fd,"start...\n",strlen("start...\n")) !=0){
    }

    if(r->method == NGX_HTTP_GET){
        write(fd,"GET\n",strlen("GET\n"));
    }
    
    write(fd,r->method_name.data,r->method_name.len);
    write(fd,"\n",strlen("\n"));
    
    write(fd,r->uri.data,r->uri.len);
    write(fd,"\n",strlen("\n"));
    write(fd,r->unparsed_uri.data,r->unparsed_uri.len);
    write(fd,"\n",strlen("\n"));
    write(fd,r->args.data,r->args.len);

    //未经解析的http头
    //r->header_in
    //r->headers_in 存储了解析过的http 头
    write(fd,r->headers_in.host->value.data,r->headers_in.host->value.len);
    //可以通过遍历这个获取非标准http头
    // r->headers_in.headers

    
    // int rc = ngx_http_read_client_request_body(r,body_handler);
    // if(rc >= NGX_HTTP_SPECIAL_RESPONSE){
    //     return rc;
    // }
    ngx_table_elt_t *h = ngx_list_push(&r->headers_out.headers);
    if(h == NULL){
        return NGX_ERROR;
    }
    h->hash = 1;
    h->key.len = sizeof("TestHead") -1;
    h->key.data = (u_char *)"TestHead";
    h->value.len = sizeof("TestValue") -1;
    h->value.data = (u_char *)"TestValue";

    ngx_int_t rc = ngx_http_send_header(r);
    if(rc == NGX_ERROR || rc == NGX_OK || r->header_only){
        return rc;
    }

    return NGX_OK;
    // return NGX_DONE;

    // return NGX_HTTP_NOT_ALLOWED;
    
}

static ngx_int_t ngx_http_mytest_handler_helloworld(ngx_http_request_t *r){

    
    int fd = open("log1", O_RDWR | O_CREAT |O_APPEND);
    struct sockaddr_in *ip = (struct sockaddr_in *) (r->connection->sockaddr);
    char* addr = inet_ntoa(ip->sin_addr);//地址转化函数，返回字符串指针
    unsigned short port = ntohs(ip->sin_port);//大小端转换
    dprintf(fd,"%s:",addr);
    dprintf(fd,"%d\n",ip->sin_port);
    dprintf(fd,"hello world");
    
    if(!(r->method) & (NGX_HTTP_GET | NGX_HTTP_HEAD)){
        return NGX_HTTP_NOT_ALLOWED;
    }
    //丢弃请求包体
    ngx_int_t rc = ngx_http_discard_request_body(r);
    if(rc != NGX_OK){
        return rc;
    }
    ngx_str_t type = ngx_string("text/plain");
    ngx_str_t responce = ngx_string("hello world");


    r->headers_out.status = NGX_HTTP_OK;
    r->headers_out.content_length_n = responce.len;
    r->headers_out.content_type = type;

    rc = ngx_http_send_header(r);
    if(rc == NGX_ERROR || rc > NGX_OK || r->header_only){
        return rc;
    }
    ngx_buf_t *b;
    b = ngx_create_temp_buf(r->pool,responce.len);
    if(b == NULL){
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }
    //复制helloworld 到ngx_buf_t 中
    ngx_memcpy(b->pos,responce.data,responce.len);

    b->last = b->pos + responce.len;

    //声明设置最后一块缓冲区
    b->last_buf = 1;

    //
    ngx_chain_t out;
    out.buf = b;
    out.next = NULL;
    // printf("this is hello world\n");
    //发送包体 在发送结束后 HTTP框架会调用ngx_http_finalize_request 结束请求
    

    return ngx_http_output_filter(r,&out);

}
static ngx_int_t ngx_http_mytest_handler_file(ngx_http_request_t *r){
    if(!(r->method) & (NGX_HTTP_GET | NGX_HTTP_HEAD)){
        return NGX_HTTP_NOT_ALLOWED;
    }
    //丢弃请求包体
    ngx_int_t rc = ngx_http_discard_request_body(r);
    if(rc != NGX_OK){
        return rc;
    }
}

static ngx_int_t 
ngx_http_mytest_upstream(ngx_http_request_t *r) {
    //创建r->upstream内存空间 
    // 但是并没有初始化 初始化需要靠各个http模块

    // ngx_http_upstream_create(r);
    //启动upstream
    //执行r->upstream->create_request() 构造请求
    //在r->upstream 设置一个cleanup 
    //使用 ngx_http_upstream_connect(r, u)连接上游服务器
    // ngx_http_upstream_init(r);
    
    //变量
    // ngx_http_get_variable_index() //还有个cf参数 需要有个函数保存索引
    

    ngx_http_get_indexed_variable(r,);




    return NGX_OK;
}

//master 进程执行
//set 函数
char *ngx_http_mytest(ngx_conf_t *cf, ngx_command_t *cmd, void *conf){
    ngx_http_core_loc_conf_t *clcf;
    ngx_http_core_main_conf_t *cmcf;
    ngx_http_core_srv_conf_t  *cscf;

    //获取clcf实例 因为可能有多个
    //找到配置文件相对应的内存地址
    clcf = ngx_http_conf_get_module_loc_conf(cf,ngx_http_core_module);
    //等价下面的
    //clcf = ((ngx_http_conf_ctx_t *)cf->ctx)->loc_conf[ngx_http_core_module.ctx_index];
    //在访问/test的时候 会调用这个函数 这是http框架控制的
    clcf->handler = ngx_http_mytest_upstream;
    
    // cmcf = ngx_http_conf_get_module_main_conf(cf,ngx_http_core_module);
    // cscf  = ngx_http_conf_get_module_srv_conf(cf,ngx_core_module);
    

    // printf("%d\n",cscf->listen);
    // cscf->listen = 8888;

    // printf("this is in ngx_http_mytest\n");
    if(cf->name != NULL){
        printf("%s\n",cf->name);
    }


    // printf("%d\n",cf->conf_file->line);


    // int fd = open("log2",O_RDWR | O_CREAT |O_APPEND);
    // if(write(fd,"ngx_http_mytest",strlen("ngx_http_mytest")) !=0){
    // }
    return NGX_OK;


}

//set 方法
char *ngx_conf_set_myconfig(ngx_conf_t *cf, ngx_command_t *cmd, void *conf){
    //参数conf 是ngx_http_block 传给用户的在ngx_http_mytest_create_loc_conf回调方法分配的ngx_http_mytest_conf_t
    ngx_http_mytest_conf_t *mycf = conf;
    ngx_str_t *value = cf->args->elts;
    mycf->my_str = value[1];
    return NGX_OK;
}

//只要配置文件中有出现test 命令 才会执行set方法
static ngx_command_t ngx_http_mytest_cmds[]={
    {
        ngx_string("test"),
    //定义这个配置项出现的位置 以及
        NGX_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_HTTP_LMT_CONF|NGX_CONF_NOARGS,
    //检测到配置文件中 有test时 执行这个函数;
    //master 进程执行
        ngx_http_mytest,//set函数  处理配置项参数 或者给自己的子模块设置配置项目参数等
        NGX_HTTP_LOC_CONF_OFFSET,
        0,
        NULL
    },
    {
        ngx_string("test_flag"),
        NGX_HTTP_LOC_CONF | NGX_CONF_FLAG,
        ngx_conf_set_flag_slot,
        NGX_HTTP_LOC_CONF_OFFSET,
        offsetof(ngx_http_mytest_conf_t,my_flag),
        NULL
    },
    {
        ngx_string("test_path"),
        NGX_HTTP_LOC_CONF | NGX_CONF_TAKE1234,
        ngx_conf_set_path_slot,
        NGX_HTTP_LOC_CONF_OFFSET,
        offsetof(ngx_http_mytest_conf_t,my_path),
        NULL,
    },
    {
        ngx_string("test_myconfig"),
        NGX_HTTP_LOC_CONF | NGX_CONF_TAKE12,
        ngx_conf_set_myconfig,
        NGX_HTTP_LOC_CONF_OFFSET,
        0,
        NULL
    },
    ngx_null_command
};

ngx_module_t ngx_http_mytest_module = {
    NGX_MODULE_V1,
    &ngx_http_mytest_module_ctx,
    ngx_http_mytest_cmds,
    NGX_HTTP_MODULE,
    NULL, //init_master
    ngx_http_mytest_init_modules,//init_module
    NULL, //
    NULL, 
    NULL,
    NULL,
    NULL,
    NGX_MODULE_V1_PADDING
};
